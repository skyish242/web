import{s as pe,n as re}from"../chunks/scheduler.CfnAWEg9.js";import{S as ue,i as ce,g as l,s as o,r as de,h as i,x as p,c as r,u as he,k as g,a,v as me,d as fe,t as ve,f as n,w as ke,H as ge,j as He,F as _e}from"../chunks/index.Dh00sRbi.js";import{C as we}from"../chunks/CodeBlock.CnANJ1Zy.js";function xe(I){let s,H,P=`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hero</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>About</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span></code>`;return{c(){s=l("pre"),H=new ge(!1),this.h()},l(u){s=i(u,"PRE",{class:!0});var _=He(s);H=_e(_,!1),_.forEach(n),this.h()},h(){H.a=null,g(s,"class","language-html")},m(u,_){a(u,s,_),H.m(P,s)},p:re,d(u){u&&n(s)}}}function Te(I){let s,H='This project follows the basic <a href="https://kit.svelte.dev/docs/project-structure" rel="nofollow">SvelteKit structure</a>, with some added conventions to make customization a post-management easier.',P,u,_='<a class="heading-link" title="Permalink" aria-hidden="true" href="#components"><span>#</span></a>Components',$,w,J='The components are organized following the <a href="https://medium.com/@WeAreMobile1st/atomic-design-getting-started-916bc81bad0e" rel="nofollow">Atomic Design</a> principles, albeit somewhat simplified. Components are in the <code>src/lib/components</code> folder, and are organized in the following way:',z,c,N='<a class="heading-link" title="Permalink" aria-hidden="true" href="#atoms"><span>#</span></a>Atoms',j,x,Q="Atoms are the most basic components, which can be seen as building blocks for other components. They’re small and self-contained, and do only one thing. Examples of atoms are buttons, inputs, and tags.",A,d,V='<a class="heading-link" title="Permalink" aria-hidden="true" href="#molecules"><span>#</span></a>Molecules',q,T,X="Molecules are groups of atoms that work together to form a more complex component. Examples of molecules are cards, groups of links, or an alert callout.",B,h,Y='<a class="heading-link" title="Permalink" aria-hidden="true" href="#organisms"><span>#</span></a>Organisms',E,b,Z="Organisms, in this project, are code blocks that represent a section of a page, such as the header, footer and hero section. They can be used directly in a page as a sort of building block, so the page’s code can be as simple as this:",S,m,W,f,ee='<a class="heading-link" title="Permalink" aria-hidden="true" href="#component-gallery"><span>#</span></a>Component Gallery',F,C,te='This project uses <a href="https://histoire.dev" rel="nofollow">Histoire</a> to be able to see and develop components in isolation. To open it, run <code>npm run story:dev</code>. This way you can customize and build new components with placeholder content and without worrying about where to put them in a page.',K,v,ne='<a class="heading-link" title="Permalink" aria-hidden="true" href="#pages"><span>#</span></a>Pages',O,M,ae="Pages obey the default SvelteKit structure, but can be summarized as follows:",D,L,se="<li>There are two different file types: the pages (<code>+page.svelte</code>) and the layouts (<code>+layout.svelte</code>). Layouts are a way to reuse the same structure between different pages without having to duplicate code;</li> <li>There are two different page layouts in this site: the “Waves” layout, which all pages inside the <code>(waves)</code> folder use, and the “Blog Article” layout, which all pages inside the <code>(blog-article)</code> folder use;</li>",G,k,le='<a class="heading-link" title="Permalink" aria-hidden="true" href="#blog-posts"><span>#</span></a>Blog Posts',R,y,ie='To know how blog posts work and how to create new ones, check out <a href="/blog-posts">How Blog Posts Work</a>.',U;return m=new we({props:{lang:"html",filename:"+page.svelte",$$slots:{default:[xe]},$$scope:{ctx:I}}}),{c(){s=l("p"),s.innerHTML=H,P=o(),u=l("h2"),u.innerHTML=_,$=o(),w=l("p"),w.innerHTML=J,z=o(),c=l("h3"),c.innerHTML=N,j=o(),x=l("p"),x.textContent=Q,A=o(),d=l("h3"),d.innerHTML=V,q=o(),T=l("p"),T.textContent=X,B=o(),h=l("h3"),h.innerHTML=Y,E=o(),b=l("p"),b.textContent=Z,S=o(),de(m.$$.fragment),W=o(),f=l("h2"),f.innerHTML=ee,F=o(),C=l("p"),C.innerHTML=te,K=o(),v=l("h2"),v.innerHTML=ne,O=o(),M=l("p"),M.textContent=ae,D=o(),L=l("ul"),L.innerHTML=se,G=o(),k=l("h2"),k.innerHTML=le,R=o(),y=l("p"),y.innerHTML=ie,this.h()},l(e){s=i(e,"P",{"data-svelte-h":!0}),p(s)!=="svelte-ruhiik"&&(s.innerHTML=H),P=r(e),u=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(u)!=="svelte-14f6cgr"&&(u.innerHTML=_),$=r(e),w=i(e,"P",{"data-svelte-h":!0}),p(w)!=="svelte-9r0xzf"&&(w.innerHTML=J),z=r(e),c=i(e,"H3",{id:!0,"data-svelte-h":!0}),p(c)!=="svelte-iballz"&&(c.innerHTML=N),j=r(e),x=i(e,"P",{"data-svelte-h":!0}),p(x)!=="svelte-1l1z0dm"&&(x.textContent=Q),A=r(e),d=i(e,"H3",{id:!0,"data-svelte-h":!0}),p(d)!=="svelte-illvc4"&&(d.innerHTML=V),q=r(e),T=i(e,"P",{"data-svelte-h":!0}),p(T)!=="svelte-9ljnh6"&&(T.textContent=X),B=r(e),h=i(e,"H3",{id:!0,"data-svelte-h":!0}),p(h)!=="svelte-1ddu7xk"&&(h.innerHTML=Y),E=r(e),b=i(e,"P",{"data-svelte-h":!0}),p(b)!=="svelte-nqh8z0"&&(b.textContent=Z),S=r(e),he(m.$$.fragment,e),W=r(e),f=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(f)!=="svelte-1nc8qyy"&&(f.innerHTML=ee),F=r(e),C=i(e,"P",{"data-svelte-h":!0}),p(C)!=="svelte-15d0xdo"&&(C.innerHTML=te),K=r(e),v=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(v)!=="svelte-mazl1x"&&(v.innerHTML=ne),O=r(e),M=i(e,"P",{"data-svelte-h":!0}),p(M)!=="svelte-1j0keeu"&&(M.textContent=ae),D=r(e),L=i(e,"UL",{"data-svelte-h":!0}),p(L)!=="svelte-t6j5s3"&&(L.innerHTML=se),G=r(e),k=i(e,"H2",{id:!0,"data-svelte-h":!0}),p(k)!=="svelte-oo6qi0"&&(k.innerHTML=le),R=r(e),y=i(e,"P",{"data-svelte-h":!0}),p(y)!=="svelte-1nntrbf"&&(y.innerHTML=ie),this.h()},h(){g(u,"id","components"),g(c,"id","atoms"),g(d,"id","molecules"),g(h,"id","organisms"),g(f,"id","component-gallery"),g(v,"id","pages"),g(k,"id","blog-posts")},m(e,t){a(e,s,t),a(e,P,t),a(e,u,t),a(e,$,t),a(e,w,t),a(e,z,t),a(e,c,t),a(e,j,t),a(e,x,t),a(e,A,t),a(e,d,t),a(e,q,t),a(e,T,t),a(e,B,t),a(e,h,t),a(e,E,t),a(e,b,t),a(e,S,t),me(m,e,t),a(e,W,t),a(e,f,t),a(e,F,t),a(e,C,t),a(e,K,t),a(e,v,t),a(e,O,t),a(e,M,t),a(e,D,t),a(e,L,t),a(e,G,t),a(e,k,t),a(e,R,t),a(e,y,t),U=!0},p(e,[t]){const oe={};t&1&&(oe.$$scope={dirty:t,ctx:e}),m.$set(oe)},i(e){U||(fe(m.$$.fragment,e),U=!0)},o(e){ve(m.$$.fragment,e),U=!1},d(e){e&&(n(s),n(P),n(u),n($),n(w),n(z),n(c),n(j),n(x),n(A),n(d),n(q),n(T),n(B),n(h),n(E),n(b),n(S),n(W),n(f),n(F),n(C),n(K),n(v),n(O),n(M),n(D),n(L),n(G),n(k),n(R),n(y)),ke(m,e)}}}class Le extends ue{constructor(s){super(),ce(this,s,null,Te,pe,{})}}export{Le as component};
